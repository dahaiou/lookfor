
IncludeName = "TestCase.vbst"
IncludeVersion = "0.06-01"
inc1NameString = IncludeName & " V" & IncludeVersion
say "Including: " & inc1NameString

' ====================================================================================================
'_h1 TC - TestCase funtions (for automated testing run from .vbst files)
' ====================================================================================================
'_h2 TC TestCase funtion globals
' ====================================================================================================
Dim TCnum, TCtitle, TCnumber2, TCtitle2, TCsendlogOn, TCechoOn, TCsuccess, TCexpected, TCremain
 TCsendlogOn = False
 TCechoOn = False

Dim iTCTotCount, iTCPassCount, iTCFailCount		'! Count of Total/Passed/Failed TestCases
iTCTotCount  = 0
iTCPassCount = 0
iTCFailCount = 0

ReDim aTCsh(4), aTCfs(4)		'! Array of Shell objects and File System Objects respectively
Dim iTCshCount, iTCfsCount
iTCshCount = 0
iTCfsCount = 0


 Dim oTCregx, oTCmatch
 Set oTCregx  = Nothing
 Set oTCmatch = Nothing
 
 '! Open TestCase Logfile and Shell
 Sub TCOpenLogFile (fname)
	' Handle opts: -a append, -r rename (earlier logfiles)...
	' Open logfile and shell
	' Attach them to aTCsh and aTCfs arrays
 End Sub

 '! Close TestCase Logfile and Shell
 Sub TCOpenLogFile (n)
	' Handle opts: ...
	' Unattach from aTCsh and aTCfs arrays
	' Close the files
	' Release the objects
 End Sub




 <:
 '_h2 TCNew (s) - Start New TestCase: Reset relevant bookkeeping vars and announce in log output
 ' ====================================================================================================
Sub TCNew (s)

	' Decode opts and args
	sArr = Split (Trim(s), " ", 2)

	' Set data, Note these vars are all global, reflecting current test case and sub-case
	TCnum     = sArr(0)
	TCtitle   = sArr(1)
	TCnumber2 = ""		' sub-number and -title
	TCtitle2  = ""
	' Log what's going on
	TClog ""
	TClog replace_args ("TestCase: {TCnum} {TCtitle}")
	TClog "===================================================================================================="
End Sub ' Sub TCNew (s)

'_h2 TClog (s) - Write to TC log output ie. stdout and any outfiles defined
' ====================================================================================================
' TODO: Outfiles NIY, Also: control verbosity level with global variables
Sub TClog (s)
	say s
	'NIY:write2logfile s
End Sub ' Sub TClog (s)

'_h2 TCcheckResult (line, expected) - Check result of TestCase, update bookkeeping and write log outputs
' ====================================================================================================
'!@TODO: ...
'! Options to:
'!		o -i Ignorecase (default is false)
'!		o (Default): Remove the matched pattern
'!		o -R Do NOT Remove anything
'!		o -l Remove the line where the matched pattern was found
'!		o Remove from beginning up to the matched pattern
'!		o Remove from beginning up to end of line where pattern found
'!		o 
'!		o 
Sub TCcheckResult (ByRef line, expected)
	' Preparation
	' saydbg "TCcheckResult enter"			' **** DEBUG
	If oTCregx is Nothing then
		Set oTCregx = New RegExp
		oTCregx.global = false
		oTCregx.ignorecase = false
	End If

'	oTCregx.pattern = "(" & expected & ")([\s\S]*)"
	oTCregx.pattern = expected
	'	saydbg "TCcheckResult about to execute pattern:" & "(" & expected & ")([\s\S]*)"			' **** DEBUG
	Set oTCmatch = oTCregx.Execute(line)

	
	'	saydbg "Now checking if matched or not"			' **** DEBUG
	' Now check if it matched or not
	' If oTCmatch.Count > 0 Then
	If oTCregx.Test(line) Then
		TCsuccess = True
		iTCTotCount  = iTCTotCount  + 1
		iTCFailCount = iTCFailCount + 1
		' Set TCremain to the (.*) part
		'max = oTCmatch(0).submatches.Count-1
		'TCremain = oTCmatch(0).submatches(max)
		TCremain = oTCregx.Replace (line, "")
		TClog replace_args ("==== Result: TC-{TCnum} OK")
	Else
		TCsuccess = False
		iTCTotCount  = iTCTotCount  + 1
		iTCFailCount = iTCFailCount + 1
		TClog replace_args ("==== Result: TC-{TCnum} #### FAILED ####")

	End If
 End Sub ' Sub TCcheckResult (line, expected)

 Set dir = Getref("ls")

 Sub ls (s)
	Set FSO = CreateObject("Scripting.FileSystemObject")
	Set objFolder = FSO.GetFolder(FSO.GetParentFolderName(WScript.ScriptFullName))
	Set allFiles = objFolder.Files
	For Each objFile in allFiles
		Wscript.StdOut.Write objFile.Name & " "
	Next
	Wscript.StdOut.WriteLine ""
 End Sub

 Sub fpath (s)
	Set fso = CreateObject("Scripting.FileSystemObject")
 	Set sh = CreateObject("WScript.Shell")

	For Each d In Split(sh.ExpandEnvironmentStrings("%PATH%"), ";")
		Wscript.StdOut.WriteLine d
		' TODO: 
		'		- Filter based on search string
		'		- Check if dir exists and mark with asterisk * or something 
		'		- Detect repeated items
		'		- Functions to add and remove stuff (?)

	Next
 End Sub




 :>

